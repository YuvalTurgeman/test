@using Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewData["Title"] = "My Library";
    var borrowedBooks = ViewBag.BorrowedBooks as IEnumerable<test.Models.BorrowModel>;
    var purchasedBooks = ViewBag.PurchasedBooks as IEnumerable<test.Models.PurchaseModel>;
}

<div class="container py-4">
    <h1 class="mb-4 d-flex align-items-center">
        <i class="bi bi-book me-2"></i>
        My Library
    </h1>

    <!-- Borrowed Books Section -->
    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-white">
            <h2 class="h4 mb-0">Borrowed Books</h2>
        </div>
        <div class="card-body">
            @if (borrowedBooks != null && borrowedBooks.Any())
            {
                <div class="row g-4">
                    @foreach (var book in borrowedBooks.Where(b => !b.IsReturned))
                    {
                        <div class="col-12 col-md-6 col-lg-4">
                            <div class="card h-100 border-0 shadow-sm">
                                <div class="card-body">
                                    <h3 class="h5 card-title">@book.Book.Title</h3>
                                    <h4 class="h6 text-muted mb-3">by @book.Book.Author</h4>

                                    @{
                                        var daysRemaining = (book.EndDate - DateTime.Now).Days;
                                        var badgeClass = daysRemaining < 7 ? "text-bg-danger" : "text-bg-info";
                                    }

                                    <div class="mb-3">
                                        <div class="badge @badgeClass mb-2">
                                            @daysRemaining days remaining
                                        </div>
                                        <div class="small text-muted">
                                            Due: @book.EndDate.ToString("MMM dd, yyyy")
                                        </div>
                                    </div>

                                    <div class="d-flex gap-2">
                                        @if (!book.IsReturned)
                                        {
                                            <form asp-action="ReturnBook" asp-route-id="@book.Id" method="post">
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="btn btn-primary">
                                                    Return Book
                                                </button>
                                            </form>
                                        }
                                        <button type="button"
                                                class="btn btn-outline-primary"
                                                onclick="simulateDownload(@book.Id, '@book.Book.Title')"
                                                title="Download book">
                                            <i class="bi bi-download"></i> Download
                                        </button>
                                        <button type="button"
                                                class="btn btn-outline-warning"
                                                onclick="showRatingModal(@book.Book.Id, '@book.Book.Title')"
                                                title="Rate book">
                                            <i class="bi bi-star"></i> Rate
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="alert alert-info" role="alert">
                    <i class="bi bi-info-circle me-2"></i>
                    You haven't borrowed any books yet.
                </div>
            }
        </div>
    </div>

    <!-- Purchased Books Section -->
    <div class="card shadow-sm">
        <div class="card-header bg-white">
            <h2 class="h4 mb-0">Purchased Books</h2>
        </div>
        <div class="card-body">
            @if (purchasedBooks != null && purchasedBooks.Any())
            {
                <div class="row g-4">
                    @foreach (var book in purchasedBooks)
                    {
                        if (!book.IsHidden)
                        {
                            <div class="col-12 col-md-6 col-lg-4">
                                <div class="card h-100 border-0 shadow-sm">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between">
                                            <div>
                                                <h3 class="h5 card-title">@book.Book.Title</h3>
                                                <h4 class="h6 text-muted mb-3">by @book.Book.Author</h4>
                                            </div>
                                            <div class="d-flex gap-2">
                                                <button type="button"
                                                        class="btn btn-outline-primary"
                                                        onclick="simulateDownload(@book.Id, '@book.Book.Title')"
                                                        title="Download book">
                                                    <i class="bi bi-download"></i>
                                                </button>
                                                <button type="button"
                                                        class="btn btn-outline-warning btn-sm"
                                                        onclick="showRatingModal(@book.Book.Id, '@book.Book.Title')"
                                                        title="Rate book">
                                                    <i class="bi bi-star"></i>
                                                </button>
                                                <button type="button"
                                                        class="btn btn-outline-danger btn-sm"
                                                        onclick="confirmDeleteBook(@book.Id, '@book.Book.Title')"
                                                        title="Delete permanently">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                        <div class="small text-muted">
                                            Purchased: @book.PurchaseDate.ToString("MMM dd, yyyy")
                                        </div>
                                        <div class="small text-muted mt-1">
                                            @{
                                                var formatNames = new List<string>();
                                                if (book.Book.AvailableFormats.HasFlag(test.Enums.BookFormat.EPUB)) formatNames.Add("EPUB");
                                                if (book.Book.AvailableFormats.HasFlag(test.Enums.BookFormat.F2B)) formatNames.Add("F2B");
                                                if (book.Book.AvailableFormats.HasFlag(test.Enums.BookFormat.MOBI)) formatNames.Add("MOBI");
                                                if (book.Book.AvailableFormats.HasFlag(test.Enums.BookFormat.PDF)) formatNames.Add("PDF");
                                            }
                                            Available formats: @(string.Join(", ", formatNames))
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            }
            else
            {
                <div class="alert alert-info" role="alert">
                    <i class="bi bi-info-circle me-2"></i>
                    You haven't purchased any books yet.
                </div>
            }
        </div>
    </div>
</div>

<!-- Delete Book Modal -->
<div class="modal fade" id="deleteBookModal" tabindex="-1" aria-labelledby="deleteBookModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteBookModalLabel">Delete Book Permanently</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    Warning: This action cannot be undone!
                </div>
                <p>Are you sure you want to permanently delete <strong><span id="bookTitle" class="fw-medium"></span></strong> from your library?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteBookForm" asp-action="DeletePurchasedBook" method="post" class="d-inline">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="bookToDeleteId" name="id" value="" />
                    <button type="submit" class="btn btn-danger">
                        <i class="bi bi-trash me-1"></i>
                        Delete Permanently
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Download Format Modal -->
<div class="modal fade" id="downloadFormatModal" tabindex="-1" aria-labelledby="downloadFormatModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="downloadFormatModalLabel">Read Book</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Select format to read <strong><span id="downloadBookTitle"></span></strong>:</p>
                <div id="formatButtons" class="d-flex gap-2 flex-wrap">
                    <!-- Format buttons will be inserted here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<!-- Rating Modal -->
<div class="modal fade" id="ratingModal" tabindex="-1" aria-labelledby="ratingModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ratingModalLabel">Rate Book: <span id="bookTitleForRating"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="ratingForm" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <input type="hidden" id="bookIdForRating" name="bookId" />
                    <div class="mb-3">
                        <label class="form-label">Rating</label>
                        <div class="rating-stars">
                            <input type="radio" name="rating" value="5" id="star5" required><label for="star5">★</label>
                            <input type="radio" name="rating" value="4" id="star4"><label for="star4">★</label>
                            <input type="radio" name="rating" value="3" id="star3"><label for="star3">★</label>
                            <input type="radio" name="rating" value="2" id="star2"><label for="star2">★</label>
                            <input type="radio" name="rating" value="1" id="star1"><label for="star1">★</label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Submit Rating</button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .rating-stars {
        display: inline-block;
        direction: rtl;
        unicode-bidi: bidi-override;
    }

    .rating-stars input {
        display: none;
    }

    .rating-stars label {
        font-size: 2em;
        color: #ddd;
        cursor: pointer;
        padding: 0 0.1em;
    }

    .rating-stars label:hover,
    .rating-stars label:hover ~ label,
    .rating-stars input:checked ~ label {
        color: #ffd700;
    }

    .rating-stars input:checked + label:hover,
    .rating-stars input:checked ~ label:hover,
    .rating-stars label:hover ~ input:checked ~ label,
    .rating-stars input:checked ~ label:hover ~ label {
        color: #ffed4a;
    }
</style>

@section Scripts {
    <script>
        let deleteModal;
        let downloadFormatModal;
        let ratingModal;

        document.addEventListener('DOMContentLoaded', function() {
            // Initialize all modals
            deleteModal = new bootstrap.Modal('#deleteBookModal');
            downloadFormatModal = new bootstrap.Modal('#downloadFormatModal');
            ratingModal = new bootstrap.Modal('#ratingModal');

            // Initialize rating form submission
            document.getElementById('ratingForm').addEventListener('submit', submitRating);

            // Handle existing alerts
            const successMessage = '@TempData["Success"]';
            const errorMessage = '@TempData["Error"]';

            if (successMessage && successMessage !== '') {
                showAlert('success', successMessage);
            }
            if (errorMessage && errorMessage !== '') {
                showAlert('danger', errorMessage);
            }
        });

        function confirmDeleteBook(id, title) {
            console.log('Delete book:', id, title);
            document.getElementById('bookToDeleteId').value = id;
            document.getElementById('bookTitle').textContent = title;
            deleteModal.show();
        }

        function simulateDownload(bookId, title) {
            // Prevent default event handling
            event.preventDefault();

            // Find the button that was clicked
            const button = event.currentTarget;
            const originalContent = button.innerHTML;

            // Show loading state with a download icon
            button.innerHTML = `
        <span class="spinner-border spinner-border-sm me-2"></span>
        <i class="bi bi-download me-1"></i>
        Downloading...
    `;
            button.disabled = true;

            // Show an alert that file is being downloaded
            showAlert('info', `
        <i class="bi bi-download me-2"></i>
        Downloading "${title}" to your computer...
    `);

            // Simulate download delay
            setTimeout(() => {
                // Restore button state
                button.innerHTML = `
            <i class="bi bi-download"></i> Download
        `;
                button.disabled = false;

                // Show success message
                showAlert('success', `
            <i class="bi bi-check-circle me-2"></i>
            "${title}" has been downloaded successfully!
        `);
            }, 2000); // 2 second simulation
        }
        
        function showRatingModal(bookId, bookTitle) {
            document.getElementById('bookIdForRating').value = bookId;
            document.getElementById('bookTitleForRating').textContent = bookTitle;
            ratingModal.show();
        }

        async function submitRating(e) {
            e.preventDefault();
            const form = e.target;
            const formData = new FormData(form);

            try {
                const response = await fetch(`/Books/Rate/${formData.get('bookId')}`, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(errorText);
                }

                showAlert('success', 'Thank you for your rating!');
                ratingModal.hide();
                form.reset();
            } catch (error) {
                showAlert('danger', error.message);
            }
        }

        function showAlert(type, message) {
            // Remove any existing alerts
            const existingAlerts = document.querySelectorAll('.alert');
            existingAlerts.forEach(alert => alert.remove());

            // Create new alert
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3`;
            alertDiv.style.zIndex = '1050';
            alertDiv.innerHTML = `
                <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;

            document.body.appendChild(alertDiv);

            // Auto-dismiss
            setTimeout(() => {
                alertDiv.classList.remove('show');
                setTimeout(() => alertDiv.remove(), 150);
            }, 3000);
        }
    </script>
}

