@using Microsoft.AspNetCore.Mvc.TagHelpers
@model test.Models.User

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center">
                    <h2 class="my-2">User Registration</h2>
                </div>
                <div class="card-body">
                    <form asp-action="Register" method="post" novalidate>
                        @Html.AntiForgeryToken()

                        <div class="mb-3">
                            <label asp-for="Username" class="form-label">Username</label>
                            <input asp-for="Username" class="form-control" placeholder="Choose a unique username" />
                            <span asp-validation-for="Username" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Email" class="form-label">Email Address</label>
                            <input asp-for="Email" class="form-control" placeholder="Enter your email" type="email" />
                            <span asp-validation-for="Email" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Password" class="form-label">Password</label>
                            <input asp-for="Password" type="password" class="form-control" placeholder="Create a strong password" />
                            <span asp-validation-for="Password" class="text-danger"></span>
                            <div class="form-text text-muted">
                                <small>
                                    Password requirements:
                                    <ul class="ps-3 mb-0">
                                        <li>At least 8 characters long</li>
                                        <li>Contains uppercase and lowercase letters</li>
                                        <li>Includes a number and special character</li>
                                    </ul>
                                </small>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <input name="confirmPassword" type="password" class="form-control" placeholder="Repeat your password" />
                            <div id="passwordMatchError" class="text-danger d-none">Passwords do not match</div>
                        </div>

                        @if (!string.IsNullOrEmpty(ViewData["ErrorMessage"]?.ToString()))
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                @ViewData["ErrorMessage"]
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        }

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-lg">Create Account</button>
                        </div>
                    </form>
                </div>
                <div class="card-footer text-center">
                    <a asp-action="Login">Already have an account? Log in here</a>
<!--                     <small class="text-muted">Already have an account? <a href="/Login" class="text-primary">Sign In</a></small> -->
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const passwordInput = document.querySelector('[name="Password"]');
            const confirmPasswordInput = document.querySelector('[name="confirmPassword"]');
            const passwordMatchError = document.getElementById('passwordMatchError');
            const form = document.querySelector('form');

            function validatePasswordMatch() {
                if (passwordInput.value !== confirmPasswordInput.value) {
                    passwordMatchError.classList.remove('d-none');
                    return false;
                } else {
                    passwordMatchError.classList.add('d-none');
                    return true;
                }
            }

            confirmPasswordInput.addEventListener('input', validatePasswordMatch);
            form.addEventListener('submit', function (e) {
                if (!validatePasswordMatch()) {
                    e.preventDefault();
                }
            });
        });
    </script>
}