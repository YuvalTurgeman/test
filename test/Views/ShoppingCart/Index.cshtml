@model ShoppingCartModel
@{
    ViewData["Title"] = "Shopping Cart";
    var borrowCount = Model.CartItems.Count(x => x.IsBorrow);
}

<div class="container">
    <h2>Shopping Cart</h2>

    @if (!Model.CartItems.Any())
    {
        <div class="alert alert-info">
            Your cart is empty. <a asp-controller="Books" asp-action="UserHomePage">Browse books</a>
        </div>
    }
    else
    {
        @if (borrowCount > 3)
        {
            <div class="alert alert-warning" role="alert">
                <i class="bi bi-exclamation-triangle me-2"></i>
                You can only borrow up to 3 different books at a time. Please remove some borrowed books to proceed with checkout.
            </div>
        }

        <form asp-action="UpdateCart" method="post">
            @Html.AntiForgeryToken()
            <table class="table">
                <thead>
                <tr>
                    <th>Book</th>
                    <th>Action Type</th>
                    <th>Quantity</th>
                    <th>Total Price</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in Model.CartItems)
                {
                    <tr>
                        <td class="d-flex align-items-center">
                            <img src="@item.Book.CoverImage" alt="@item.Book.Title" style="width: 50px; margin-right: 10px;" />
                            <div>
                                <h5>@item.Book.Title</h5>
                                <small>by @item.Book.Author</small>
                            </div>
                        </td>
                        <td>
                            <select name="updates[@item.Id].IsBorrow" class="form-select"
                                    @(item.Book.IsBuyOnly ? "disabled" : "")>
                                <option value="false" selected="@(!item.IsBorrow)">Permanent Purchase</option>
                                <option value="true" selected="@(item.IsBorrow)"
                                        disabled="@(item.Book.IsBuyOnly)">Borrow (30 days)</option>
                            </select>
                        </td>
                        <td>
                            <div class="input-group" style="width: 150px;">
                                <button type="button" class="btn btn-outline-secondary btn-sm"
                                        onclick="updateQuantity(this, -1)">-</button>
                                <input type="number" name="updates[@item.Id].Quantity" value="@item.Quantity"
                                       class="form-control text-center"
                                       min="1" max="@(item.IsBorrow ? 1 : 10)" />
                                <button type="button" class="btn btn-outline-secondary btn-sm"
                                        onclick="updateQuantity(this, 1)">+</button>
                            </div>
                        </td>
                        <td>$@(item.FinalPrice * item.Quantity)</td>
                        <td>
                            <button type="button" class="btn btn-danger btn-sm"
                                    onclick="removeFromCart(@item.Id, '@item.Book.Title')">
                                Remove
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
                <tfoot>
                <tr>
                    <td colspan="3" class="text-end"><strong>Total:</strong></td>
                    <td>$@Model.CartItems.Sum(i => i.FinalPrice * i.Quantity)</td>
                    <td></td>
                </tr>
                </tfoot>
            </table>

            <div class="cart-summary mt-4">
                <div class="card bg-light">
                    <div class="card-body">
                        <h5 class="card-title">Cart Summary:</h5>
                        <p>Books to Purchase: @Model.CartItems.Where(i => !i.IsBorrow).Sum(i => i.Quantity)</p>
                        <p>Books to Borrow: @borrowCount
                            @if (borrowCount > 0)
                            {
                                <small class="text-muted">(Maximum: 3 different books)</small>
                            }
                        </p>
                    </div>
                </div>
            </div>

            <div class="d-flex justify-content-end gap-2 mt-4">
                <a asp-controller="Books" asp-action="UserHomePage" class="btn btn-secondary">
                    Continue Shopping
                </a>
                <button type="submit" class="btn btn-primary">Update Cart</button>
                <button type="button" class="btn btn-success" onclick="createCheckoutSession()">
                    Proceed to Payment
                </button>
            </div>
        </form>
    }
</div>

@section Scripts {
    <script>
        function updateQuantity(button, change) {
            const input = button.parentElement.querySelector('input');
            const newValue = Math.max(1, Math.min(parseInt(input.value) + change, parseInt(input.max)));
            if (newValue !== parseInt(input.value)) {
                input.value = newValue;
            }
        }

        function removeFromCart(id, title) {
            if (confirm(`Are you sure you want to remove "${title}" from your cart?`)) {
                var form = document.createElement('form');
                form.method = 'post';
                form.action = '/ShoppingCart/RemoveFromCart';

                var antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').cloneNode(true);
                form.appendChild(antiForgeryToken);

                var idInput = document.createElement('input');
                idInput.type = 'hidden';
                idInput.name = 'id';
                idInput.value = id;
                form.appendChild(idInput);

                document.body.appendChild(form);
                form.submit();
            }
        }

        function createCheckoutSession() {
            fetch('/ShoppingCart/CreateCheckoutSession', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.url) {
                        window.location.href = data.url;
                    }
                })
                .catch(error => {
                    alert('Failed to create checkout session. Please try again.');
                });
        }
    </script>
}